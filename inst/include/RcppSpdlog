//                                               Emacs make this -*- mode: C++; -*-
// RcppSpdlog -- wrapping spdlog for use with R

// define R_R_H and USING_R so that REprintf is used, then declare ut
// (including R.h leads to a side-effect with MinGW so minimal is better)
#define R_R_H
#define USING_R
extern "C" {
  void REprintf(const char *, ...);
  void R_FlushConsole(void);
}

// this define is important to not include another logger pulling in stdout
#define SPDLOG_DISABLE_DEFAULT_LOGGER 1

// include main header for spdlog -- others headers needed for extra features
#include "spdlog/spdlog.h"

// a custom R sink using Rcpp::Rcout (and Rcpp.h is included too)
#include "rcpp_sink.h"

// include the auto-generated exports for the exported C++ functions
#include <RcppSpdlog.h>

// for convenience define cuter ones in another (shorter) namespace
namespace spdl {
    inline void setup(const std::string& name = "default", const std::string& level = "warn") {  RcppSpdlog::log_setup(name, level); }
    inline void drop(const std::string& name) { RcppSpdlog::log_drop(name); }
    inline void set_pattern(const std::string& s) { RcppSpdlog::log_set_pattern(s); }
    inline void set_level(const std::string& s) { RcppSpdlog::log_set_level(s); }
    inline void trace(const std::string& s) { RcppSpdlog::log_trace(s); }
    inline void debug(const std::string& s) { RcppSpdlog::log_debug(s); }
    inline void info(const std::string& s) { RcppSpdlog::log_info(s); }
    inline void warn(const std::string& s) { RcppSpdlog::log_warn(s); }
    inline void error(const std::string& s) { RcppSpdlog::log_error(s); }
    inline void critical(const std::string& s) { RcppSpdlog::log_critical(s); }
}
